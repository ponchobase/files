// On document ready
$(function () {
    try {
        // Initialize app
        initialize_app();
    } catch (e) {
        // console.log(e);
    }
});

function initialize_app() {
    try {
        // Init accordions
        init_accordions();

        // Init anchor tags
        init_anchor_tags();

        // Init charts
        init_charts();

        // Init lazy load
        init_lazy_load();

        // Init swipers
        init_swipers();
        
        // Init scroll
        init_scroll();

        // Read token
        read_token();

        // Set read token interval
        set_read_token_interval();
    } catch (e) {
        // console.error(e);
    }
}
function check_array_defined(array) {
    try {
        // Check if
        if (typeof array == "undefined" || array == null || !$.isArray(array)) {
            // Vars
            array = [];
        }
    } catch (e) {
        // console.error(e);
        array = [];
    }

    // Return
    return array;
}

function check_value_defined(value) {
    try {
        // Check if
        if (typeof value == "undefined" || value == null) {
            // Vars
            value = "";
        }
    } catch (e) {
        // console.error(e);
        // Vars
        value = "";
    }

    // Return
    return value;
}

function format_number_decimals(value) {
    try {
        // Check if
        if ($.isNumeric(value)) {
            // Check if
            if (value >= 1 || value <= -1) {
                // 2 decimals
                value = parseFloat(value).toFixed(2);
            } else {
                // Number zeros after decimal
                var number_zeros = -Math.floor(Math.log10(Math.abs(value)) + 1);

                // Number of decimals = number zeros + 4
                var number_decimals = number_zeros + 4;

                // Check if
                if (number_zeros > 10) {
                    // Vars
                    value = 0;
                } else {
                    // Check if
                    if (number_decimals >= 10) {
                        // Vars
                        number_decimals = 10;
                    }

                    // Format value to number of decimals and trim extra zeros
                    value = parseFloat(parseFloat(value).toFixed(number_decimals));
                }
            }
        } else {
            // Vars
            value = 0;
        }
    } catch (e) {
        // console.error(e);
    }

    // Return
    return value;
}

function format_value_percent(value, percent) {
    // Define vars
    var return_string = "";

    try {
        // Check if
        if ($.isNumeric(value)) {
            // Vars
            value = format_number_decimals(value);
            percent = parseFloat(percent).toFixed(2);

            // Vars
            var change_color = get_change_color(percent);
            var change_direction = get_change_direction(percent);

            // Vars
            return_string = `<span class="font--bold font--${change_color}">${change_direction} ${value} (${percent}%)</span>`;
        }
    } catch (e) {
        // console.error(e);
    }

    // Return
    return return_string;
}

function get_change_color(value) {
    // Define vars
    var change_color = "";

    try {
        // Check if
        if (value > 0) {
            // Vars
            change_color = "green";
        } else if (value < 0) {
            // Vars
            change_color = "red";
        } else {
            // Vars
            change_color = "white";
        }
    } catch (e) {
        // console.error(e);
    }

    // Return
    return change_color;
}

function get_change_direction(value) {
    // Define vars
    var change_direction = "";

    try {
        // Check if
        if (value < 0) {
            // Vars
            change_direction = '<i class="fas fa-long-arrow-alt-down"></i>';
        } else if (value > 0) {
            // Vars
            change_direction = '<i class="fas fa-long-arrow-alt-up"></i>';
        } else {
            // Vars
            change_direction = '';
        }
    } catch (e) {
        // console.error(e);
    }

    // Return
    return change_direction;
}

function init_anchor_tags() {
    try {
        // On click
        $('a[href^="#"]').on("click", function (e) {
            // Vars
            var href = $(this).attr("href");

            // Check if
            if ($(".site__header .header-position-fixed").length > 0) {
                // Vars
                var headerHeight = $("header").innerHeight();
            } else {
                // Vars
                var headerHeight = 0;
            }

            // Animate
            $("html,body").animate({ scrollTop: $(href).offset().top - headerHeight - 100 }, 500);
        });
    } catch (e) {
        // console.log(e);
    }
}

function init_lazy_load() {
    try {
        // Callback
        let callback = (entries, observer) => {
            // Loop
            entries.forEach((entry) => {
                // Check if
                if (entry.intersectionRatio >= 0.1 && entry.target.style.opacity != 1) {
                    // Opacity
                    entry.target.style.opacity = 1;
                }
            });
        };

        // Options
        let options = {
            root: null,
            threshold: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
        }

        // Observer
        let observer = new IntersectionObserver(callback, options);

        // Select .lazy-load
        for (const target of document.querySelectorAll(".lazy-load")) {
            // Observer
            observer.observe(target);
        }
    } catch (e) {
        // console.error(e);
    }
}

function throttle(callback, limit) {
    try {
        // Vars
        var wait = false;

        // Return
        return function (...args) {
            // Check if
            if (!wait) {
                // Callback
                callback(...args);

                // True
                wait = true;

                // Set timeout
                setTimeout(function () {
                    // False
                    wait = false;
                }, limit);
            }
        }
    } catch (e) {
        // console.error(e);
    }
}
function init_accordions() {
    try {
        // Vars
        var selector_accordions = ".accordions";

        // Check if
        if ($(selector_accordions).length > 0) {
            // Vars
            var selector_accordion = selector_accordions + " .accordion";
            var selector_accordion_all = selector_accordions + " [data-accordions-all]";
            var selector_accordion_trigger = selector_accordion + " .trigger";
            var selector_accordions_container = selector_accordions + " .accordions__container";

            // Update accordion selectors
            update_accordion_selectors();

            // Loop
            $(selector_accordions_container + ":not(.accordions--closed)").each(function (index, value) {
                try {
                    // Check if
                    if (!$(this).hasClass("accordions--init")) {
                        // Vars
                        var selector_accordion_first = ".accordion:first-child";

                        // Add class
                        $(this).addClass("accordions--init");

                        // Show first accordion
                        $(this).find(selector_accordion_first).addClass("accordion--open");
                        $(this).find(selector_accordion_first + " .trigger").attr("aria-expanded", true);
                        $(this).find(selector_accordion_first + " .accordion__panel").show();
                    };
                } catch (e) {
                    // console.error(e);
                }
            });

            // On click
            $(selector_accordion_trigger).off("click");
            $(selector_accordion_trigger).on("click", function () {
                try {
                    // Vars
                    var accordion_id = $(this).attr("aria-controls");

                    // Check if
                    if (!check_value_defined(accordion_id)) {
                        // Update accordion selectors
                        update_accordion_selectors();

                        // Vars
                        var accordion_id = $(this).attr("aria-controls");
                    }

                    // Vars
                    var accordion_open = $(this).attr("aria-expanded") === "true";
                    var selector_accordion_id = $(selector_accordion + " #" + accordion_id);

                    // Check if
                    if (accordion_open) {
                        // Close accordion
                        $(this).attr("aria-expanded", false);
                        $(this).closest(".accordion").removeClass("accordion--open");

                        // Slide up
                        $(selector_accordion_id).slideUp(250, function () {
                            // Animation complete.
                        });

                        // Hidden
                        $(selector_accordion_id).attr("hidden", "");
                    } else {
                        // Open accordion
                        $(this).attr("aria-expanded", true);
                        $(this).closest(".accordion").addClass("accordion--open");

                        // Slide down
                        $(selector_accordion_id).slideDown(250, function () {
                            // Animation complete.
                        });

                        // Remove hidden
                        $(selector_accordion_id).removeAttr("hidden");
                    }
                } catch (e) {
                    // console.error(e);
                }
            });

            // On click
            $(selector_accordion_all).off("click");
            $(selector_accordion_all).on("click", function () {
                try {
                    // Vars
                    var accordions_all = $(this).attr("data-accordions-all");
                    var accordions = $(this).closest(selector_accordions).find(".accordion");

                    // Loop
                    $(accordions).each(function (index, value) {
                        // Vars
                        var accordion_id = $(this).find(".trigger").attr("aria-controls");

                        // Check if
                        if (!check_value_defined(accordion_id)) {
                            // Update accordion selectors
                            update_accordion_selectors();

                            // Vars
                            var accordion_id = $(this).attr("aria-controls");
                        }

                        // Check if
                        if (accordions_all == "hide") {
                            // Close accordion by id
                            close_accordion_by_id(accordion_id);
                        } else {
                            // Open accordion by id
                            open_accordion_by_id(accordion_id);
                        }
                    });
                } catch (e) {
                    // console.error(e);
                }
            });
        }
    } catch (e) {
        // console.error(e);
    }
}

function close_accordion_by_id(accordion_id) {
    try {
        // Vars
        var selector_accordions = ".accordions";
        var selector_accordion = selector_accordions + " .accordion";
        var selector_accordion_id = $(selector_accordion + " #" + accordion_id);

        // Close accordion
        $(selector_accordion + " [aria-controls=" + accordion_id + "]").attr("aria-expanded", false);
        $(selector_accordion + " [aria-controls=" + accordion_id + "]").closest(".accordion").removeClass("accordion--open");

        // Hide
        $(selector_accordion_id).hide();

        // Remove hidden
        $(selector_accordion_id).attr("hidden", "");
    } catch (e) {
        // console.error(e);
    }
}

function open_accordion_by_id(accordion_id) {
    try {
        // Vars
        var selector_accordions = ".accordions";
        var selector_accordion = selector_accordions + " .accordion";
        var selector_accordion_id = $(selector_accordion + " #" + accordion_id);

        // Open accordion
        $(selector_accordion + " [aria-controls=" + accordion_id + "]").attr("aria-expanded", true);
        $(selector_accordion + " [aria-controls=" + accordion_id + "]").closest(".accordion").addClass("accordion--open");

        // Show
        $(selector_accordion_id).show();

        // Hidden
        $(selector_accordion_id).removeAttr("hidden");
    } catch (e) {
        // console.error(e);
    }
}

function update_accordion_selectors() {
    try {
        // Loop
        $(".accordions .accordions__container .accordion").each(function (index, value) {
            // Accordion trigger
            $(this).find(".trigger").attr("id", "accordion_id_" + index);
            $(this).find(".trigger").attr("aria-controls", "accordion_panel_" + index);

            // Accordion panel
            $(this).find(".accordion__panel").attr("id", "accordion_panel_" + index);
            $(this).find(".accordion__panel").attr("aria-labelledby", "accordion_id_" + index);
        });
    } catch (e) {
        // console.error(e);
    }
}
function init_charts() {
    try {
        // Init tokenomics chart
        init_tokenomics_chart();
    } catch (e) {
        // console.error(e);
    }
}

function init_tokenomics_chart() {
    try {
        // Vars
        var ctx = document.getElementById("tokenomics_chart").getContext("2d");
        var type = "pie";

        // Data
        var data = {
            labels: [
                "Red",
                "Blue",
                "Yellow"
            ],
            datasets: [{
                label: "My First Dataset",
                data: [300, 50, 100],
                backgroundColor: [
                    "rgb(255, 99, 132)",
                    "rgb(54, 162, 235)",
                    "rgb(255, 205, 86)"
                ],
                hoverOffset: 4
            }]
        }

        // Init new chart
        new Chart(ctx, {
            type: type,
            data: data
        });
    } catch (e) {
        // console.error(e);
    }
}
function init_scroll() {
    try {
        // Vars
        var scroll_selector = "#scroll-top";
        var scroll_timeout = "";

        // On scroll
        $(window).on("scroll", throttle(function (event) {
            try {
                // Vars
                var scroll_top = $(this).scrollTop();
                var window_height = window.innerHeight;
                window_height = window_height * 1.5;

                // Check if
                if (scroll_top > window_height) {
                    // Fade in
                    $(scroll_selector).fadeIn(100);

                    // Clear timeout
                    clearTimeout(scroll_timeout)

                    // Set timeout
                    scroll_timeout = setTimeout(function () {
                        // Fade out
                        $(scroll_selector).fadeOut(100);
                    }, 2000);
                } else {
                    // Fade out
                    $(scroll_selector).fadeOut(100);
                }
            } catch (e) {
                // console.error(e);
            }
        }, 100));

        // On click
        $(scroll_selector).off("click");
        $(scroll_selector).on("click", function () {
            try {
                // Animate
                $("html, body").animate({ scrollTop: 0 }, 500);

                // Return
                return false;
            } catch (e) {
                // console.error(e);
            }
        });
    } catch (e) {
        // console.error(e);
    }
}
function init_swipers() {
    try {
        // Init about swiper
        init_about_swiper();

        // Init roadmap swiper
        init_roadmap_swiper();
    } catch (e) {
        // console.error(e);
    }
}

function init_about_swiper() {
    try {
        // Define vars
        var selector_swiper = ".about-swiper";
        var data_swiper = "[data-swiper=about-swiper]";

        // Init new swiper
        new Swiper(data_swiper, {
            // Optional parameters
            direction: "horizontal",
            freeMode: true,
            keyboard: {
                enabled: true,
                onlyInViewport: false,
            },
            loop: true,
            mousewheel: {
                forceToAxis: true
            },
            navigation: {
                nextEl: selector_swiper + " .swiper-next",
                prevEl: selector_swiper + " .swiper-prev"
            },
            slidesPerView: "auto",
            slidesPerGroup: 1,
            spaceBetween: 16,
            updateOnWindowResize: true
        });
    } catch (e) {
        // console.error(e);
    }
}

function init_roadmap_swiper() {
    try {
        // Define vars
        var selector_swiper = ".roadmap-swiper";
        var data_swiper = "[data-swiper=roadmap-swiper]";

        // Init new swiper
        new Swiper(data_swiper, {
            // Optional parameters
            direction: "horizontal",
            freeMode: true,
            keyboard: {
                enabled: true,
                onlyInViewport: false,
            },
            loop: true,
            mousewheel: {
                forceToAxis: true
            },
            navigation: {
                nextEl: selector_swiper + " .swiper-next",
                prevEl: selector_swiper + " .swiper-prev"
            },
            slidesPerView: "auto",
            slidesPerGroup: 1,
            spaceBetween: 16,
            updateOnWindowResize: true
        });
    } catch (e) {
        // console.error(e);
    }
}
function read_token() {
    try {
        // Define vars
        var price_found = false;

        // Read token
        $.ajax({
            type: "GET",
            cache: false,
            url: "https://api.dexscreener.com/latest/dex/pairs/base/0x6FD34677ecDFae4caE732A5B22F1A3082917eb15",
            success: function (response, status, xhr) {
                // Vars
                response = check_value_defined(response);
                var pair = check_value_defined(response.pair);

                // Update token ui
                price_found = update_token_ui(pair);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                // console.error(errorThrown);
            }
        }).always(() => {
            // nprogress_end();
            // Check if
            if (!price_found) {
                // Read token backup
                read_token_backup();
            }
        });
    } catch (e) {
        // console.error(e);
    }
}

function read_token_backup() {
    try {
        // Read token
        $.ajax({
            type: "GET",
            cache: false,
            url: "https://api.dexscreener.com/latest/dex/tokens/0xc2fe011c3885277c7f0e7ffd45ff90cadc8ecd12",
            success: function (response, status, xhr) {
                // Vars
                response = check_value_defined(response);
                var pairs = check_array_defined(response.pairs);

                // Check if
                if(pairs){
                    // Loop
                    $.each(pairs, function(index, value){
                        // Vars
                        var address = check_value_defined(value.baseToken.address);
                        var symbol = check_value_defined(value.baseToken.symbol);
                        var chain_id = check_value_defined(value.chainId);
                        
                        // Check if
                        if(
                            address == "0xC2fE011C3885277c7F0e7ffd45Ff90cADc8ECD12" &&
                            symbol == "PONCHO" &&
                            chain_id == "base"
                        ){
                            // Update token ui
                            update_token_ui(value);

                            // Return
                            return false;
                        }
                    });
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                // console.error(errorThrown);
            }
        }).always(() => {
            // nprogress_end();
        });
    } catch (e) {
        // console.error(e);
    }
}

function set_read_token_interval() {
    try {
        // Set interval - 1 min
        setInterval(function () {
            // Read token
            read_token();
        }, 60 * 1000);
    } catch (e) {
        // console.error(e);
    }
}

function update_token_ui(pair) {
    // Define vars
    var price_found = false;

    // Check if
    if (pair) {
        // Vars
        var price = check_value_defined(pair.priceUsd);

        // Check if
        if (price) {
            // Vars
            var price_change = check_value_defined(pair.priceChange.h24);
            var price_string = format_value_percent(price, price_change);

            // Check if
            if (price_string) {
                // Append
                $("[data-token=price]").html(price_string);

                // Vars
                price_found = true;

                // Title
                document.title = "$PONCHO: " + price + " (" + price_change + "%) | Poncho on BASE";
            }
        }
    }

    // Return
    return price_found;
}